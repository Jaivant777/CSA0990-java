1. Write java code for creating 3 methods called even, odd and prime in parent class and override them from child class. The 
parent class should print 1 to 20 range in all method, but child print 1 to 30 array range in all methods. And access all the 
methods using derived class object.8.00 AM to 9.00 AM 

class Parent {
 
    public void even() {
        System.out.print("Parent Even: ");
        for (int i = 1; i <= 20; i++) {
            if (i % 2 == 0) {
                System.out.print(i + " ");
            }
        }
        System.out.println();
    }

    public void odd() {
        System.out.print("Parent Odd: ");
        for (int i = 1; i <= 20; i++) {
            if (i % 2 != 0) {
                System.out.print(i + " ");
            }
        }
        System.out.println();
    }

    public void prime() {
        System.out.print("Parent Prime: ");
        for (int i = 1; i <= 20; i++) {
            if (isPrime(i)) {
                System.out.print(i + " ");
            }
        }
        System.out.println();
    }

    private boolean isPrime(int num) {
        if (num <= 1) return false;
        for (int i = 2; i <= Math.sqrt(num); i++) {
            if (num % i == 0) return false;
        }
        return true;
    }
}

class Child extends Parent {

    public void even() {
        System.out.print("Child Even: ");
        for (int i = 1; i <= 30; i++) {
            if (i % 2 == 0) {
                System.out.print(i + " ");
            }
        }
        System.out.println();
    }

    public void odd() {
        System.out.print("Child Odd: ");
        for (int i = 1; i <= 30; i++) {
            if (i % 2 != 0) {
                System.out.print(i + " ");
            }
        }
        System.out.println();
    }

    public void prime() {
        System.out.print("Child Prime: ");
        for (int i = 1; i <= 30; i++) {
            if (isPrime(i)) {
                System.out.print(i + " ");
            }
        }
        System.out.println();
    }


}

public class Main {
    public static void main(String[] args) {
        Child child = new Child();

        child.even();
        child.odd();
        child.prime();
    }
}
Output

Child Even: 2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 
Child Odd: 1 3 5 7 9 11 13 15 17 19 21 23 25 27 29 
Child Prime: 2 3 5 7 11 13 17 19 23 29 

2. Override a default constructor, which contains a=10,b=15 in java using parametrized constructor which contains a=20,b=25. Create 
a method called disp(). And call both the constructors associating it with disp().

class Demo {
    int a, b;

    public Demo() {
        a = 10;
        b = 15;
    }

    public Demo(int a, int b) {
        this.a = a;
        this.b = b;
    }

    public void disp() {
        System.out.println("a = " + a + ", b = " + b);
    }

    public static void main(String[] args) {

        Demo defaultObj = new Demo();
        defaultObj.disp();  // Output: a = 10, b = 15

        Demo paramObj = new Demo(20, 25);
        paramObj.disp();    // Output: a = 20, b = 25
    }
}
Output

a = 10, b = 15
a = 20, b = 25

3. Java program to create a Base class with a method called ‘void area(int a, int b)’ which print area of a square. Now override the 
method from Derived class and make it print area of a rectangle.

class Base {   
    void area(int a, int b) {
        System.out.println("Area of Square: " + (a * a));
    }
}

class Derived extends Base {
    void area(int a, int b) {
        System.out.println("Area of Rectangle: " + (a * b));
    }
}

public class Main {
    public static void main(String[] args) {
        Base square = new Base();
        square.area(4, 0); 

        Derived rectangle = new Derived();
        rectangle.area(4, 5);
    }
}

Output

Area of Square: 16
Area of Rectangle: 20

4. Write java code to overload a method called ‘int sum(int a, int b)’
by the 3 ways.
a) By increasing and decreasing no. of parameters
b) By changing the data types of parameters
c) By interchanging the parameters  give the 3 programs sepratly

a) By Increasing and Decreasing Number of Parameters

class OverloadByParams {

    int sum(int a, int b) {
        return a + b;
    }

    int sum(int a, int b, int c) {
        return a + b + c;
    }

    public static void main(String[] args) {
        OverloadByParams obj = new OverloadByParams();
        System.out.println("Sum (2 params): " + obj.sum(5, 10));
        System.out.println("Sum (3 params): " + obj.sum(5, 10, 15));
    }
}
b) By Changing the Data Types of Parameters

class OverloadByType {

    int sum(int a, int b) {
        return a + b;
    }

    double sum(double a, double b) {
        return a + b;
    }

    public static void main(String[] args) {
        OverloadByType obj = new OverloadByType();
        System.out.println("Sum (int): " + obj.sum(5, 10));
        System.out.println("Sum (double): " + obj.sum(5.5, 10.5));
    }
}
c) By Interchanging the Parameters

class OverloadByOrder {

    int sum(int a, double b) {
        return a + (int) b;
    }

    int sum(double a, int b) {
        return (int) a + b;
    }

    public static void main(String[] args) {
        OverloadByOrder obj = new OverloadByOrder();
        System.out.println("Sum (int, double): " + obj.sum(5, 10.5));
        System.out.println("Sum (double, int): " + obj.sum(5.5, 10));
    }
}

5.Create an interface called Tree and extend 2 classes from it called Branch1 and Branch2. Tree should contain methods fruits(), 
leaves() and flowers(), these methods contain 2,3,4 parameters respectively


interface Tree {
    void fruits(int a, int b);
    void leaves(int a, int b, int c);
    void flowers(int a, int b, int c, int d);
}

class Branch1 implements Tree {
  
    public void fruits(int a, int b) {
        System.out.println("Branch1 fruits: " + (a + b));
    }

    public void leaves(int a, int b, int c) {
        System.out.println("Branch1 leaves: " + (a + b + c));
    }

    public void flowers(int a, int b, int c, int d) {
        System.out.println("Branch1 flowers: " + (a + b + c + d));
    }
}

class Branch2 implements Tree {

    public void fruits(int a, int b) {
        System.out.println("Branch2 fruits: " + (a * b));
    }

    public void leaves(int a, int b, int c) {
        System.out.println("Branch2 leaves: " + (a * b * c));
    }

    public void flowers(int a, int b, int c, int d) {
        System.out.println("Branch2 flowers: " + (a * b * c * d));
    }
}

public class Main {
    public static void main(String[] args) {
        Tree branch1 = new Branch1();
        Tree branch2 = new Branch2();

        branch1.fruits(2, 3);
        branch1.leaves(1, 2, 3);
        branch1.flowers(1, 2, 3, 4);

        branch2.fruits(2, 3);
        branch2.leaves(1, 2, 3);
        branch2.flowers(1, 2, 3, 4);
    }
}

Output

Branch1 fruits: 5
Branch1 leaves: 6
Branch1 flowers: 10
Branch2 fruits: 6
Branch2 leaves: 6
Branch2 flowers: 24
